# Generated by Django 2.2.12 on 2020-05-26 01:28

from django.db import migrations
from django.db import models
import laboratory.validators
import django

def load_sustancecharacteristic(apps, schema_editor):
    Catalog = apps.get_model('laboratory', 'Catalog')
    Object = apps.get_model('laboratory', 'Object')
    SustanceCharacteristics = apps.get_model('laboratory', 'SustanceCharacteristics')
    imdgs = dict((   # Object
            ('1', Catalog.objects.filter(description='Explosivo').first()),
            ('2', Catalog.objects.filter(description='Gases').first()),
            ('3', Catalog.objects.filter(description='Líquidos inflamables').first()),
            ('4', Catalog.objects.filter(description='Solidos inflamables').first()),
            ('5', Catalog.objects.filter(description='Sustancias oxidantes y peróxidos orgánicos').first()),
            ('6', Catalog.objects.filter(description='Sustancias tóxicas e infecciosas').first()),
            ('7', Catalog.objects.filter(description='Material radioactivo').first()),
            ('8', Catalog.objects.filter(description='Sustancias corrosivas').first()),
            ('9', Catalog.objects.filter(description='Sustancias y artículos peligrosos diversos').first()))
            )

    for obj in Object.objects.all():
        susc = SustanceCharacteristics.objects.create(
            obj= obj,
            imdg= imdgs[obj.imdg_code] if obj.imdg_code in imdgs else obj.imdg_code,
            molecular_formula= obj.molecular_formula,
            cas_id_number= obj.cas_id_number,
            security_sheet= obj.security_sheet,
            is_precursor= obj.is_precursor,
        )
        for code in obj.h_code.all():
            susc.h_code.add(code)



class Migration(migrations.Migration):

    dependencies = [
        ('laboratory', '0003_pre_catalog'),
    ]

    operations = [
        migrations.CreateModel(
            name='SustanceCharacteristics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bioaccumulable', models.NullBooleanField(default=False)),
                ('molecular_formula', models.CharField(blank=True, max_length=255, null=True,
                                                       validators=[laboratory.validators.validate_molecular_formula],
                                                       verbose_name='Molecular formula')),
                (
                    'cas_id_number',
                    models.CharField(blank=True, max_length=255, null=True, verbose_name='Cas ID Number')),
                ('security_sheet',
                 models.FileField(blank=True, null=True, upload_to='security_sheets/', verbose_name='Security sheet')),
                ('is_precursor', models.BooleanField(default=False, verbose_name='Is precursor')),
                ('h_code',
                 models.ManyToManyField(blank=True, to='sga.DangerIndication', verbose_name='Danger Indication')),
                ('iarc',
                 laboratory.catalog.GTForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 related_name='gt_iarcrel', to='laboratory.Catalog')),
                ('imdg',
                 laboratory.catalog.GTForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 related_name='gt_imdg', to='laboratory.Catalog')),
                ('obj', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='laboratory.Object')),
                ('white_organ',
                 laboratory.catalog.GTManyToManyField(related_name='gt_white_organ', to='laboratory.Catalog')),
            ],
            options={
                'verbose_name': 'Sustance characteristic',
                'verbose_name_plural': 'Sustance characteristics',
            },
        ),

        migrations.RunPython(load_sustancecharacteristic),
        migrations.RemoveField(
            model_name='object',
            name='cas_id_number',
        ),
        migrations.RemoveField(
            model_name='object',
            name='h_code',
        ),
        migrations.RemoveField(
            model_name='object',
            name='imdg_code',
        ),
        migrations.RemoveField(
            model_name='object',
            name='is_precursor',
        ),
        migrations.RemoveField(
            model_name='object',
            name='molecular_formula',
        ),
        migrations.RemoveField(
            model_name='object',
            name='security_sheet',
        ),
        migrations.AddField(
            model_name='object',
            name='synonym',
            field=models.CharField(blank=True, help_text='Comma separed name', max_length=255, null=True,
                                   verbose_name='Synonym'),
        ),
        migrations.AlterField(
            model_name='object',
            name='description',
            field=models.TextField(blank=True, null=True, verbose_name='Description'),
        ),
    ]
