# Generated by Django 2.2.12 on 2020-05-26 01:54

from django.db import migrations, models

from laboratory.catalog.utils import create_catalog
import laboratory.validators
import django

def load_catalogs(apps, schema_editor):
    Catalog = apps.get_model('laboratory', 'Catalog')
    data = create_catalog(Catalog)

def change_ShelfObject(apps, schema_editor):
    ShelfObject = apps.get_model('laboratory', 'ShelfObject')
    mydata = ShelfObject.objects.all()
    Catalog = apps.get_model('laboratory', 'Catalog')

    units = dict((   #  ShelfObject   measurement_unit
                ('0', Catalog.objects.filter(description='Metros').first().pk),
                ('1', Catalog.objects.filter(description='Milímetros').first().pk),
                ('2', Catalog.objects.filter(description='Centímetros').first().pk),
                ('3', Catalog.objects.filter(description='Litros').first().pk),
                ('4', Catalog.objects.filter(description='Mililitros').first().pk),
                ("5", Catalog.objects.filter(description='Unidades').first().pk),
                ('6', Catalog.objects.filter(description='Gramos').first().pk),
                ('7', Catalog.objects.filter(description='Kilogramos').first().pk),
                ('8', Catalog.objects.filter(description='Miligramos').first().pk),
                ('9', Catalog.objects.filter(description='Metro cúbico').first().pk) )
                )

    for element in mydata:
        if element.measurement_unit:
            element.measurement_unit = str(units[str(element.measurement_unit)])
            element.save()

def change_Shelf(apps, schema_editor):
    Shelf = apps.get_model('laboratory', 'Shelf')
    mydata = Shelf.objects.all()
    Catalog = apps.get_model('laboratory', 'Catalog')
    units = dict((
        ('C', Catalog.objects.filter(description='Espacio').first().pk ),
        ('D', Catalog.objects.filter(description='Gaveta').first().pk),
    ))
    for element in mydata:
        if element.type:
            element.type = str(units[str(element.type)])
            element.save()

def change_Furniture(apps, schema_editor):
    Shelf = apps.get_model('laboratory', 'Furniture')
    mydata = Shelf.objects.all()
    Catalog = apps.get_model('laboratory', 'Catalog')
    units = dict((
        ('F', Catalog.objects.filter(description='Estante').first().pk ),
        ('D', Catalog.objects.filter(description='Cajón').first().pk),
    ))


    for element in mydata:
        if element.type:
            element.type = str(units[str(element.type)])
            element.save()

class Migration(migrations.Migration):

    dependencies = [
        ('sga', '0003_auto_20200525_1908'),
        ('laboratory', '0002_auto_20200325_0151'),
    ]

    operations = [
        migrations.CreateModel(
            name='Catalog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=150)),
                ('description', models.CharField(max_length=500)),
            ],
        ),

        migrations.RunPython(load_catalogs),
        migrations.RunPython(change_ShelfObject),
        migrations.RunPython(change_Furniture),
        migrations.RunPython(change_Shelf),

        migrations.AlterField(
            model_name='shelfobject',
            name='measurement_unit',
            field=laboratory.catalog.GTForeignKey(on_delete=django.db.models.deletion.DO_NOTHING,
                                                  related_name='measurementunit', to='laboratory.Catalog',
                                                  verbose_name='Measurement unit'),
        ),
        migrations.AlterField(
            model_name='shelf',
            name='type',
            field=laboratory.catalog.GTForeignKey(on_delete=django.db.models.deletion.DO_NOTHING,
                                                  to='laboratory.Catalog', verbose_name='Type'),
        ),
        migrations.AlterField(
            model_name='furniture',
            name='type',
            field=laboratory.catalog.GTForeignKey(on_delete=django.db.models.deletion.DO_NOTHING,
                                                  to='laboratory.Catalog', verbose_name='Type'),
        ),
    ]
